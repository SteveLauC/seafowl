[workspace]
members = ["clade"]

[workspace.dependencies]
arrow = "49.0.0"
arrow-buffer = "49.0.0"
arrow-csv = "49.0.0"
arrow-flight = "49.0.0"
# For the JSON format support
# https://github.com/apache/arrow-rs/pull/2868
# https://github.com/apache/arrow-rs/pull/2724
arrow-integration-test = "49.0.0"
arrow-schema = "49.0.0"
async-trait = "0.1.64"

datafusion = "34.0.0"
datafusion-common = "34.0.0"
datafusion-expr = "34.0.0"

itertools = ">=0.10.0"
tokio = { version = "1.0", features = ["macros", "rt", "rt-multi-thread", "signal", "process"] }
tracing = { version = "0.1", features = ["log"] }

[package]
name = "seafowl"
build = "build.rs"
version = "0.5.4"
edition = "2021"

readme = "README.md"
description = "Seafowl is an analytical database designed for modern data-driven Web applications."
authors = ["Splitgraph, Inc. <support@splitgraph.com>"]
keywords = ["database", "http", "web"]
homepage = "https://seafowl.io"
license = "Apache-2.0"
include = [
    "src/**/*.rs",
    "Cargo.toml",
    "build.rs",
    "migrations",

]

[features]
catalog-postgres = ["sqlx/postgres"]
default = ["catalog-postgres", "frontend-arrow-flight", "frontend-postgres", "object-store-s3", "object-store-gcs", "remote-tables"]
frontend-arrow-flight = ["dep:tonic", "dep:arrow-flight", "arrow-flight/flight-sql-experimental"]
frontend-postgres = ["convergence", "convergence-arrow"]
object-store-gcs = ["object_store/gcp"]
object-store-s3 = ["object_store/aws"]
remote-tables = ["dep:datafusion-remote-tables"]

[patch.crates-io]
# Patch to pick up https://github.com/apache/arrow-rs/pull/5282 from
# https://github.com/splitgraph/arrow-rs/tree/49-with-date-fix

arrow-arith = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-array = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-buffer = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-cast = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-csv = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-data = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-ipc = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-json = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-ord = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-row = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-schema = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-select = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }
arrow-string = { git = "https://github.com/splitgraph/arrow-rs", branch = "49-with-date-fix" }

[dependencies]
arrow = { workspace = true }
arrow-buffer = { workspace = true }
arrow-csv = { workspace = true }
arrow-flight = { workspace = true, optional = true }
# For the JSON format support
# https://github.com/apache/arrow-rs/pull/2868
# https://github.com/apache/arrow-rs/pull/2724
arrow-integration-test = { workspace = true }
arrow-schema = { workspace = true }
async-trait = { workspace = true }
base64 = "0.21.0"

bytes = "1.4.0"
chrono = { version = "0.4", default_features = false }
clade = { path = "clade" }
clap = { version = "3.2.19", features = [ "derive" ] }
config = "0.13.3"

# PG wire protocol support
convergence = { git = "https://github.com/splitgraph/convergence", branch = "datafusion-34-upgrade", optional = true }
convergence-arrow = { git = "https://github.com/splitgraph/convergence", branch = "datafusion-34-upgrade", optional = true }

dashmap = "5.4.0"

datafusion = { workspace = true }
datafusion-common = { workspace = true }
datafusion-expr = { workspace = true }

datafusion-remote-tables = { path = "./datafusion_remote_tables", optional = true }

deltalake = { git = "https://github.com/delta-io/delta-rs", rev = "9264edea89a2fc1c35f4a6b9faab125748ff3651", features = ["s3-native-tls", "datafusion-ext"] }

futures = "0.3"
hex = ">=0.4.0"
itertools = { workspace = true }
lazy_static = ">=1.4.0"
moka = { version = "0.12.2", default_features = false, features = ["future", "atomic64", "quanta"] }
object_store = "0.8"
parking_lot = "0.12.1"
percent-encoding = "2.2.0"
prost = "0.12.1"

# Needs to be in non-dev because repository::testutils can't be
# imported by tests::end_to_end if it's cfg(test).
rand = "0.8"
regex = ">=1.6.0"
reqwest = { version = "0.11.14", features = [ "stream" ] }
rmp = "0.8.11"
rmp-serde = "1.1.1"
rmpv = { version = "1.0.0", features = ["with-serde"] }
rustyline = "13.0"
serde = "1.0.156"
serde_json = "1.0.93"
sha2 = ">=0.10.1"
sqlparser = "0.40"
sqlx = { version = "0.7.1", features = [ "runtime-tokio-rustls", "sqlite", "any", "uuid" ] }
strum = ">=0.24"
strum_macros = ">=0.24"
tempfile = "3"
thiserror = "1"
tokio = { workspace = true }
tonic = { version = "0.10.0", optional = true }
tracing = { workspace = true }
tracing-subscriber = { version = "0.3.18", features = ["json", "env-filter"] }
url = "2.5"
uuid = "1.2.1"
warp = "0.3.6"

# For WASM user-defined functions
wasi-common = "16.0.0"
wasmtime = "16.0.0"
wasmtime-wasi = "16.0.0"

[dev-dependencies]
assert_cmd = "2"
assert_unordered = "0.3"
rstest = "*"
serial_test = "2"
tonic-reflection = "0.10"
wiremock = "0.5"

[build-dependencies]
anyhow = "1.0.63"  # for build.rs
vergen = "7"

[profile.release]
codegen-units = 1
lto = true
strip = true
