version: "3.9"
services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
    ports:
      - "5432:5432"
    restart: unless-stopped

  dex:
    image: ghcr.io/dexidp/dex
    ports:
      - "5556:5556"
    configs:
      - source: dex.yaml
        target: /config-dev.yaml
    command: dex serve /config-dev.yaml

  minio:
    image: minio/minio:latest
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_CONSOLE_ADDRESS: ":9001"
      DEX_HOST: "localhost"
      DEX_PORT: "5556"
      MINIO_IDENTITY_OPENID_CONFIG_URL: "http://dex:5556/dex/.well-known/openid-configuration"
      MINIO_IDENTITY_OPENID_CLIENT_ID: "example-app"
      MINIO_IDENTITY_OPENID_CLIENT_SECRET: "ZXhhbXBsZS1hcHAtc2VjcmV0"
      MINIO_IDENTITY_OPENID_CLAIM_NAME: "name"
    command: minio server /data

  createbuckets:
    image: minio/mc:latest
    depends_on:
      - minio
    volumes:
      - ./tests/data:/test-data
    entrypoint: >
      /bin/sh -c " /usr/bin/mc config host add test-minio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc rm -r --force test-minio/seafowl-test-bucket;  /usr/bin/mc mb
      test-minio/seafowl-test-bucket; /usr/bin/mc cp -r test-data test-minio/seafowl-test-bucket;
      /usr/bin/mc anonymous set public
      test-minio/seafowl-test-bucket/test-data/table_with_ns_column.parquet;

      /usr/bin/mc admin user add test-minio test-user test-pass; /usr/bin/mc admin policy attach
      test-minio readwrite --user test-user;

      /usr/bin/mc mb test-minio/seafowl-test-bucket-public; /usr/bin/mc anonymous set public
      test-minio/seafowl-test-bucket-public; exit 0; "

  fake-gcs:
    image: tustvold/fake-gcs-server
    command:
      ["-scheme", "http", "-backend", "memory", "-data", "test/", "-public-host", "localhost:4443"]
    ports:
      - "4443:4443"
    volumes:
      - ./tests/data:/test/test-data

  create-fake-gcs-buckets:
    image: curlimages/curl:8.00.1
    depends_on:
      - fake-gcs
    entrypoint: >
      curl -v -X POST --data-binary '{"name":"seafowl-test-bucket"}' -H "Content-Type:
      application/json" "http://fake-gcs:4443/storage/v1/b"

configs:
  dex.yaml:
    content: |
      # Mock Dex OIDC config, appropriated from the example config: 
      # https://github.com/dexidp/dex/blob/master/examples/config-dev.yaml

      # The base path of dex and the external name of the OpenID Connect service.
      # This is the canonical URL that all clients MUST use to refer to dex. If a
      # path is provided, dex's HTTP service will listen at a non-root URL.
      issuer: http://dex:5556/dex

      # The storage configuration determines where dex stores its state. Supported
      # options include SQL flavors and Kubernetes third party resources.
      #
      # See the documentation (https://dexidp.io/docs/storage/) for further information.
      storage:
        type: sqlite3
        config:
          file: ":memory:"

      # Configuration for the HTTP endpoints.
      web:
        http: 0.0.0.0:5556

      oauth2:
        # Uncomment the passwordConnector to use a specific connector for password grants
        passwordConnector: local

      # Instead of reading from an external storage, use this list of clients.
      #
      # If this option isn't chosen clients may be added through the gRPC API.
      staticClients:
        - id: example-app
          redirectURIs:
            - 'http://dex:5555/callback'
          name: 'Example App'
          secret: ZXhhbXBsZS1hcHAtc2VjcmV0

      connectors:
        - type: mockCallback
          id: mock
          name: Example

      # Let dex keep a list of passwords which can be used to login to dex.
      enablePasswordDB: true

      # A static list of passwords to login the end user. By identifying here, dex
      # won't look in its underlying storage for passwords.
      #
      # If this option isn't chosen users may be added through the gRPC API.
      staticPasswords:
        - email: "admin@example.com"
          # bcrypt hash of the string "password": $(echo password | htpasswd -BinC 10 admin | cut -d: -f2)
          hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
          username: "readwrite"
          userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
